/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/run-task": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Run Task
         * @description Requires an active subscription. Returns the task ID that can be used to track progress.
         */
        post: operations["run_task_api_v1_run_task_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/stop-task": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Stop Task
         * @description Stops a running browser automation task immediately. The task cannot be resumed after being stopped.
         *     Use `/pause-task` endpoint instead if you want to temporarily halt execution.
         */
        put: operations["stop_task_api_v1_stop_task_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/pause-task": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Pause Task
         * @description Pauses execution of a running task. The task can be resumed later using the `/resume-task` endpoint. Useful for manual intervention or inspection.
         */
        put: operations["pause_task_api_v1_pause_task_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/resume-task": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Resume Task
         * @description Resumes execution of a previously paused task. The task will continue from where it was paused. You can't resume a stopped task.
         */
        put: operations["resume_task_api_v1_resume_task_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/task/{task_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Task
         * @description Returns comprehensive information about a task, including its current status, steps completed, output (if finished), and other metadata.
         */
        get: operations["get_task_api_v1_task__task_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/task/{task_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Task Status
         * @description Returns just the current status of a task (created, running, finished, stopped, or paused).
         *     More lightweight than the full task details endpoint.
         */
        get: operations["get_task_status_api_v1_task__task_id__status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/task/{task_id}/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Task Media
         * @description Returns links to any recordings or media generated during task execution,
         *     such as browser session recordings. Only available for completed tasks.
         */
        get: operations["get_task_media_api_v1_task__task_id__media_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/task/{task_id}/screenshots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Task Screenshots
         * @description Returns any screenshot urls generated during task execution.
         */
        get: operations["get_task_screenshots_api_v1_task__task_id__screenshots_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/task/{task_id}/gif": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Task Gif
         * @description Returns a gif url generated from the screenshots of the task execution.
         *     Only available for completed tasks that have screenshots.
         */
        get: operations["get_task_gif_api_v1_task__task_id__gif_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/task/{task_id}/output-file/{file_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Task Output File
         * @description Returns a presigned url for downloading a file from the task output files.
         */
        get: operations["get_task_output_file_api_v1_task__task_id__output_file__file_name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Tasks
         * @description Returns a paginated list of all tasks belonging to the user, ordered by creation date.
         *     Each task includes basic information like status and creation time. For detailed task info, use the
         *     get task endpoint.
         */
        get: operations["list_tasks_api_v1_tasks_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/uploads/presigned-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload File Presigned Url
         * @description Returns a presigned url for uploading a file to the user's files bucket.
         *     After uploading a file, the user can use the `included_file_names` field
         *     in the `RunTaskRequest` to include the files in the task.
         */
        post: operations["upload_file_presigned_url_api_v1_uploads_presigned_url_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/scheduled-task": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Scheduled Task
         * @description Create a scheduled task to run at regular intervals or based on a cron expression.
         *     Requires an active subscription. Returns the scheduled task ID.
         */
        post: operations["create_scheduled_task_api_v1_scheduled_task_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/scheduled-tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Scheduled Tasks
         * @description Returns a paginated list of all scheduled tasks belonging to the user, ordered by creation date.
         *     Each task includes basic information like schedule type, next run time, and status.
         */
        get: operations["list_scheduled_tasks_api_v1_scheduled_tasks_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/scheduled-task/{task_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Scheduled Task
         * @description Returns detailed information about a specific scheduled task, including its schedule configuration
         *     and current status.
         */
        get: operations["get_scheduled_task_api_v1_scheduled_task__task_id__get"];
        /**
         * Update Scheduled Task
         * @description Update a scheduled task with partial updates.
         */
        put: operations["update_scheduled_task_api_v1_scheduled_task__task_id__put"];
        post?: never;
        /**
         * Delete Scheduled Task
         * @description Deletes a scheduled task. This will prevent any future runs of this task.
         *     Any currently running instances of this task will be allowed to complete.
         */
        delete: operations["delete_scheduled_task_api_v1_scheduled_task__task_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/browser-profiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Browser Profiles
         * @description Returns a paginated list of all browser profiles belonging to the user, ordered by creation date.
         *     Each profile includes configuration like ad blocker settings, proxy settings, and viewport dimensions.
         */
        get: operations["list_browser_profiles_api_v1_browser_profiles_get"];
        put?: never;
        /**
         * Create Browser Profile
         * @description Create a new browser profile with custom settings for ad blocking, proxy usage, and viewport dimensions.
         *     Pay as you go users can only have one profile. Subscription users can create multiple profiles.
         */
        post: operations["create_browser_profile_api_v1_browser_profiles_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/browser-profiles/{profile_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Browser Profile
         * @description Returns information about a specific browser profile and its configuration settings.
         */
        get: operations["get_browser_profile_api_v1_browser_profiles__profile_id__get"];
        /**
         * Update Browser Profile
         * @description Update a browser profile with partial updates. Only the fields you want to change need to be included.
         */
        put: operations["update_browser_profile_api_v1_browser_profiles__profile_id__put"];
        post?: never;
        /**
         * Delete Browser Profile
         * @description Deletes a browser profile. This will remove the profile and all associated browser data.
         */
        delete: operations["delete_browser_profile_api_v1_browser_profiles__profile_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check Balance
         * @description Returns the user's current API credit balance, which includes both monthly subscription
         *     credits and any additional purchased credits. Required for monitoring usage and ensuring sufficient
         *     credits for task execution.
         */
        get: operations["check_balance_api_v1_balance_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Me
         * @description Returns a boolean value indicating if the API key is valid and the user is authenticated.
         */
        get: operations["me_api_v1_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Ping
         * @description Use this endpoint to check if the server is running and responding.
         */
        get: operations["ping_api_v1_ping_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * CheckUserBalanceResponse
         * @description balance: Current number of API credits available, value in cents (0.01 USD = 1 credit)
         */
        CheckUserBalanceResponse: {
            /** Balance */
            balance: string;
        };
        /**
         * CreateBrowserProfileRequest
         * @description Request model for creating a new browser profile.
         */
        CreateBrowserProfileRequest: {
            /** Profile Name */
            profile_name: string;
            /**
             * Description
             * @default
             */
            description: string;
            /**
             * Persist
             * @default true
             */
            persist: boolean;
            /**
             * Ad Blocker
             * @default true
             */
            ad_blocker: boolean;
            /**
             * Proxy
             * @default true
             */
            proxy: boolean;
            /** @default us */
            proxy_country_code: components["schemas"]["ProxyCountryCode"];
            /**
             * Browser Viewport Width
             * @default 1280
             */
            browser_viewport_width: number;
            /**
             * Browser Viewport Height
             * @default 960
             */
            browser_viewport_height: number;
        };
        /**
         * CreateBrowserProfileResponse
         * @description Response model for creating a browser profile.
         */
        CreateBrowserProfileResponse: {
            /** Profile Id */
            profile_id: string;
            /** Profile Name */
            profile_name: string;
            /** Description */
            description: string;
            /** Persist */
            persist: boolean;
            /** Ad Blocker */
            ad_blocker: boolean;
            /** Proxy */
            proxy: boolean;
            proxy_country_code: components["schemas"]["ProxyCountryCode"];
            /** Browser Viewport Width */
            browser_viewport_width: number;
            /** Browser Viewport Height */
            browser_viewport_height: number;
        };
        /**
         * DeleteBrowserProfileResponse
         * @description Response model for deleting a browser profile.
         */
        DeleteBrowserProfileResponse: Record<string, never>;
        /**
         * GetBrowserProfileResponse
         * @description Response model for a single browser profile.
         */
        GetBrowserProfileResponse: {
            /** Profile Id */
            profile_id: string;
            /** Profile Name */
            profile_name: string;
            /** Description */
            description: string;
            /** Persist */
            persist: boolean;
            /** Ad Blocker */
            ad_blocker: boolean;
            /** Proxy */
            proxy: boolean;
            proxy_country_code: components["schemas"]["ProxyCountryCode"];
            /** Browser Viewport Width */
            browser_viewport_width: number;
            /** Browser Viewport Height */
            browser_viewport_height: number;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * LLMModel
         * @enum {string}
         */
        LLMModel: "gpt-4o" | "gpt-4o-mini" | "gpt-4.1" | "gpt-4.1-mini" | "o4-mini" | "o3" | "gemini-2.0-flash" | "gemini-2.0-flash-lite" | "gemini-2.5-flash-preview-04-17" | "gemini-2.5-flash" | "gemini-2.5-pro" | "claude-3-7-sonnet-20250219" | "claude-sonnet-4-20250514" | "llama-4-maverick-17b-128e-instruct";
        /**
         * ListBrowserProfilesResponse
         * @description Response model for listing browser profiles.
         */
        ListBrowserProfilesResponse: {
            /** Profiles */
            profiles: components["schemas"]["GetBrowserProfileResponse"][];
            /** Total Pages */
            total_pages: number;
            /** Page */
            page: number;
            /** Limit */
            limit: number;
            /** Total Count */
            total_count: number;
        };
        /**
         * ListScheduledTasksResponse
         * @description Response model for listing scheduled tasks.
         */
        ListScheduledTasksResponse: {
            /** Tasks */
            tasks: components["schemas"]["ScheduledTaskResponse"][];
            /** Total Pages */
            total_pages: number;
            /** Page */
            page: number;
            /** Limit */
            limit: number;
            /** Total Count */
            total_count: number;
        };
        /**
         * ListTasksResponse
         * @description total_pages: Total number of pages available
         *     page: Current page number
         *     limit: Number of items per page
         *     total_count: Total number of tasks across all pages
         */
        ListTasksResponse: {
            /** Tasks */
            tasks: components["schemas"]["TaskSimpleResponse"][];
            /** Total Pages */
            total_pages: number;
            /** Page */
            page: number;
            /** Limit */
            limit: number;
            /** Total Count */
            total_count: number;
        };
        /**
         * ProxyCountryCode
         * @enum {string}
         */
        ProxyCountryCode: "us" | "uk" | "fr" | "it" | "jp" | "au" | "de" | "fi" | "ca" | "in";
        /**
         * RunTaskRequest
         * @description task: What should the agent do. You can try it out at https://cloud.browser-use.com/
         *
         *     secrets: Dictionary of secrets to be used by the agent. Secrets are safely encrypted before storing in the database.
         *
         *     allowed_domains: List of domains that the agent is allowed to visit. If not set, the agent will be allowed to visit all domains (not recommended if you are using secrets).
         *
         *     save_browser_data: If set to True, the browser cookies and other data will be saved. Cookies are safely encrypted before storing in the database.
         *
         *     structured_output_json: If set, the agent will use this JSON schema as the output model (see example here: https://docs.browser-use.com/cloud/implementation#structured-output-example).
         *
         *     use_adblock: If set to True, the agent will use an adblocker. This overrides the browser profile's adblocker setting.
         *
         *     use_proxy: If set to True, the agent will use a (mobile) proxy. Note that proxy is required for captcha solving, so if you disable proxy, you will not be able to solve captchas. This overrides the browser profile's proxy setting.
         *
         *     proxy_country_code: Country code for residential proxy. Must be one of: 'us', 'fr', 'it', 'jp', 'au', 'de', 'fi', 'ca'. Default is 'us'. This overrides the browser profile's proxy country code.
         *
         *     highlight_elements: If set to True, the agent will highlight the elements on the page.
         *
         *     included_file_names: File names to include in the task (note: use `uploads/presigned-url` endpoint to upload the files first!). E.g. ['file1.txt', 'file2.csv'].
         *
         *     browser_viewport_width: Width of the browser viewport in pixels. Default is 1280. This overrides the browser profile's viewport width.
         *
         *     browser_viewport_height: Height of the browser viewport in pixels. Default is 960. This overrides the browser profile's viewport height.
         *
         *     max_agent_steps: Maximum number of agent steps to take. Default is 75. Maximum is 200.
         *
         *     browser_profile_id: ID of the browser profile to use. If not set, the default profile will be used.
         */
        RunTaskRequest: {
            /** Task */
            task: string;
            /** Secrets */
            secrets?: {
                [key: string]: string;
            } | null;
            /** Allowed Domains */
            allowed_domains?: string[] | null;
            /**
             * Save Browser Data
             * @default false
             */
            save_browser_data: boolean | null;
            /** Structured Output Json */
            structured_output_json?: string | null;
            llm_model?: components["schemas"]["LLMModel"] | null;
            /**
             * Highlight Elements
             * @default true
             */
            highlight_elements: boolean | null;
            /** Included File Names */
            included_file_names?: string[] | null;
            /**
             * Max Agent Steps
             * @default 75
             */
            max_agent_steps: number | null;
            /**
             * Enable Public Share
             * @default false
             */
            enable_public_share: boolean | null;
            /** Browser Profile Id */
            browser_profile_id?: string | null;
            /** Use Adblock */
            use_adblock?: boolean | null;
            /** Use Proxy */
            use_proxy?: boolean | null;
            proxy_country_code?: components["schemas"]["ProxyCountryCode"] | null;
            /** Browser Viewport Width */
            browser_viewport_width?: number | null;
            /** Browser Viewport Height */
            browser_viewport_height?: number | null;
        };
        /**
         * ScheduleType
         * @enum {string}
         */
        ScheduleType: "interval" | "cron";
        /**
         * ScheduledTaskRequest
         * @description schedule_type: Type of schedule to use (interval or cron)
         *     interval_minutes: Minutes between runs (required for interval schedule)
         *     cron_expression: Cron expression for scheduling (required for cron schedule)
         *     start_at: When to start the schedule (optional, defaults to now)
         *     end_at: When to end the schedule (optional, defaults to 1 year from now)
         *
         *     Note: Secrets are not yet supported for scheduled tasks.
         */
        ScheduledTaskRequest: {
            /** Task */
            task: string;
            /** Secrets */
            secrets?: {
                [key: string]: string;
            } | null;
            /** Allowed Domains */
            allowed_domains?: string[] | null;
            /**
             * Save Browser Data
             * @default false
             */
            save_browser_data: boolean | null;
            /** Structured Output Json */
            structured_output_json?: string | null;
            llm_model?: components["schemas"]["LLMModel"] | null;
            /**
             * Highlight Elements
             * @default true
             */
            highlight_elements: boolean | null;
            /** Included File Names */
            included_file_names?: string[] | null;
            /**
             * Max Agent Steps
             * @default 75
             */
            max_agent_steps: number | null;
            /**
             * Enable Public Share
             * @default false
             */
            enable_public_share: boolean | null;
            /** Browser Profile Id */
            browser_profile_id?: string | null;
            /** Use Adblock */
            use_adblock?: boolean | null;
            /** Use Proxy */
            use_proxy?: boolean | null;
            proxy_country_code?: components["schemas"]["ProxyCountryCode"] | null;
            /** Browser Viewport Width */
            browser_viewport_width?: number | null;
            /** Browser Viewport Height */
            browser_viewport_height?: number | null;
            schedule_type: components["schemas"]["ScheduleType"];
            /** Interval Minutes */
            interval_minutes?: number | null;
            /** Cron Expression */
            cron_expression?: string | null;
            /** Start At */
            start_at?: string | null;
            /** End At */
            end_at?: string | null;
        };
        /**
         * ScheduledTaskResponse
         * @description Response model for a single scheduled task.
         */
        ScheduledTaskResponse: {
            /** Id */
            id: string;
            /** Task */
            task: string;
            /** Save Browser Data */
            save_browser_data: boolean;
            /** Structured Output Json */
            structured_output_json?: string | null;
            llm_model: components["schemas"]["LLMModel"];
            /** Use Adblock */
            use_adblock: boolean;
            /** Use Proxy */
            use_proxy: boolean;
            /** Highlight Elements */
            highlight_elements: boolean;
            /** Browser Profile Id */
            browser_profile_id?: string | null;
            schedule_type: components["schemas"]["ScheduleType"];
            /** Interval Minutes */
            interval_minutes?: number | null;
            /** Cron Expression */
            cron_expression?: string | null;
            /**
             * Start At
             * Format: date-time
             */
            start_at: string;
            /**
             * Next Run At
             * Format: date-time
             */
            next_run_at: string;
            /**
             * End At
             * Format: date-time
             */
            end_at: string;
            /** Is Active */
            is_active: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * TaskBrowserDataResponse
         * @description cookies: List of cookies from the browser session
         *
         *     This field is only available if save_browser_data is set to True in the request.
         */
        TaskBrowserDataResponse: {
            /** Cookies */
            cookies: {
                [key: string]: unknown;
            }[];
        };
        /** TaskCreatedResponse */
        TaskCreatedResponse: {
            /** Id */
            id: string;
        };
        /** TaskGifResponse */
        TaskGifResponse: {
            /** Gif */
            gif: string | null;
        };
        /** TaskMediaResponse */
        TaskMediaResponse: {
            /** Recordings */
            recordings: string[] | null;
        };
        /**
         * TaskOutputFileResponse
         * @description download_url: Presigned URL for downloading the output file.
         */
        TaskOutputFileResponse: {
            /** Download Url */
            download_url: string;
        };
        /**
         * TaskResponse
         * @description output: Final output or result of the task (if completed)
         *     live_url: URL to view live task execution. To preview the url you can directly integrate it in <iframe> tag. For example:
         *             ```
         *             <iframe src={live_url} width="600" height="450"></iframe>
         *             ```
         *     Which will display the task execution and allows you to control the agent live. It is pure VNC implementation.
         *
         *     browser_data: Browser session data from the task (cookies). To enable this feature, you need to set `save_browser_data = True` in the request.
         */
        TaskResponse: {
            /** Id */
            id: string;
            /** Task */
            task: string;
            /** Live Url */
            live_url?: string | null;
            /** Output */
            output: string | null;
            status: components["schemas"]["TaskStatusEnum"];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Finished At */
            finished_at?: string | null;
            /** Steps */
            steps: components["schemas"]["TaskStepResponse"][];
            browser_data?: components["schemas"]["TaskBrowserDataResponse"] | null;
            /** User Uploaded Files */
            user_uploaded_files?: string[] | null;
            /** Output Files */
            output_files?: string[] | null;
            /** Public Share Url */
            public_share_url?: string | null;
        };
        /** TaskScreenshotsResponse */
        TaskScreenshotsResponse: {
            /** Screenshots */
            screenshots: string[] | null;
        };
        /** TaskSimpleResponse */
        TaskSimpleResponse: {
            /** Id */
            id: string;
            /** Task */
            task: string;
            /** Output */
            output: string | null;
            status: components["schemas"]["TaskStatusEnum"];
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Finished At */
            finished_at?: string | null;
            /** Live Url */
            live_url?: string | null;
        };
        /**
         * TaskStatusEnum
         * @description Enumeration of possible task states.
         *
         *     - created: Task is initialized but not yet started
         *     - running: Task is currently executing
         *     - finished: Task has completed successfully
         *     - stopped: Task was manually stopped
         *     - paused: Task execution is temporarily paused
         *     - failed: Task encountered an error and could not complete
         * @enum {string}
         */
        TaskStatusEnum: "created" | "running" | "finished" | "stopped" | "paused" | "failed";
        /**
         * TaskStepResponse
         * @description step: Step number
         *     evaluation_previous_goal: Assessment of the previous goal's completion
         *     next_goal: Description of what the next step aims to achieve
         *     url: URL of the page where the step was executed
         */
        TaskStepResponse: {
            /** Id */
            id: string;
            /** Step */
            step: number;
            /** Evaluation Previous Goal */
            evaluation_previous_goal: string;
            /** Next Goal */
            next_goal: string;
            /** Url */
            url: string;
        };
        /**
         * UpdateBrowserProfileRequest
         * @description Request model for updating a browser profile.
         */
        UpdateBrowserProfileRequest: {
            /** Profile Name */
            profile_name?: string | null;
            /** Description */
            description?: string | null;
            /** Persist */
            persist?: boolean | null;
            /** Ad Blocker */
            ad_blocker?: boolean | null;
            /** Proxy */
            proxy?: boolean | null;
            proxy_country_code?: components["schemas"]["ProxyCountryCode"] | null;
            /** Browser Viewport Width */
            browser_viewport_width?: number | null;
            /** Browser Viewport Height */
            browser_viewport_height?: number | null;
        };
        /**
         * UpdateBrowserProfileResponse
         * @description Response model for updating a browser profile.
         */
        UpdateBrowserProfileResponse: {
            /** Profile Id */
            profile_id: string;
            /** Profile Name */
            profile_name: string;
            /** Description */
            description: string;
            /** Persist */
            persist: boolean;
            /** Ad Blocker */
            ad_blocker: boolean;
            /** Proxy */
            proxy: boolean;
            proxy_country_code: components["schemas"]["ProxyCountryCode"];
            /** Browser Viewport Width */
            browser_viewport_width: number;
            /** Browser Viewport Height */
            browser_viewport_height: number;
        };
        /**
         * UpdateScheduledTaskRequest
         * @description Request model for updating individual fields of a scheduled task.
         */
        UpdateScheduledTaskRequest: {
            /** Task */
            task?: string | null;
            schedule_type?: components["schemas"]["ScheduleType"] | null;
            /** Interval Minutes */
            interval_minutes?: number | null;
            /** Cron Expression */
            cron_expression?: string | null;
            /** Start At */
            start_at?: string | null;
            /** End At */
            end_at?: string | null;
            /** Is Active */
            is_active?: boolean | null;
            /** Use Adblock */
            use_adblock?: boolean | null;
            /** Use Proxy */
            use_proxy?: boolean | null;
            /** Highlight Elements */
            highlight_elements?: boolean | null;
            llm_model?: components["schemas"]["LLMModel"] | null;
            /** Save Browser Data */
            save_browser_data?: boolean | null;
            /** Structured Output Json */
            structured_output_json?: string | null;
        };
        /**
         * UploadFileRequest
         * @description file_name: Name of the file to upload (e.g. 'file1.txt', 'file2.csv').
         *     content_type: Content type of the file to upload (e.g. 'image/png', 'application/pdf', 'text/plain'). Only images and documents are supported.
         */
        UploadFileRequest: {
            /** File Name */
            file_name: string;
            /** Content Type */
            content_type: string;
        };
        /**
         * UploadFileResponse
         * @description upload_url: Presigned URL for uploading a file to the user's files bucket.
         *
         *     Note: Make a PUT presigned URL request to upload the file.
         */
        UploadFileResponse: {
            /** Upload Url */
            upload_url: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    run_task_api_v1_run_task_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RunTaskRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskCreatedResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    stop_task_api_v1_stop_task_put: {
        parameters: {
            query: {
                task_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    pause_task_api_v1_pause_task_put: {
        parameters: {
            query: {
                task_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    resume_task_api_v1_resume_task_put: {
        parameters: {
            query: {
                task_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_task_api_v1_task__task_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_task_status_api_v1_task__task_id__status_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskStatusEnum"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_task_media_api_v1_task__task_id__media_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskMediaResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_task_screenshots_api_v1_task__task_id__screenshots_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskScreenshotsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_task_gif_api_v1_task__task_id__gif_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskGifResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_task_output_file_api_v1_task__task_id__output_file__file_name__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: string;
                file_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskOutputFileResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_tasks_api_v1_tasks_get: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListTasksResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_file_presigned_url_api_v1_uploads_presigned_url_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UploadFileRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadFileResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_scheduled_task_api_v1_scheduled_task_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScheduledTaskRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskCreatedResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_scheduled_tasks_api_v1_scheduled_tasks_get: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListScheduledTasksResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_scheduled_task_api_v1_scheduled_task__task_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScheduledTaskResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_scheduled_task_api_v1_scheduled_task__task_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateScheduledTaskRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ScheduledTaskResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_scheduled_task_api_v1_scheduled_task__task_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_browser_profiles_api_v1_browser_profiles_get: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListBrowserProfilesResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_browser_profile_api_v1_browser_profiles_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateBrowserProfileRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateBrowserProfileResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_browser_profile_api_v1_browser_profiles__profile_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                profile_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetBrowserProfileResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_browser_profile_api_v1_browser_profiles__profile_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                profile_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateBrowserProfileRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateBrowserProfileResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_browser_profile_api_v1_browser_profiles__profile_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                profile_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteBrowserProfileResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    check_balance_api_v1_balance_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CheckUserBalanceResponse"];
                };
            };
        };
    };
    me_api_v1_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    ping_api_v1_ping_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
